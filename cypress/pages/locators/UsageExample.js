/**
 * 📚 EJEMPLO DE USO DE LOCATORS AUTO-GENERADOS
 * 
 * Este archivo muestra cómo usar los locators generados automáticamente
 * por el sistema de scraper unificado.
 * 
 * Generado automáticamente el: 2025-05-29T02:20:41.082Z
 */

// Importar locators
const locators = require('./AutoGeneratedLocators.json');

// ============================================================================
// EJEMPLOS DE USO EN CYPRESS
// ============================================================================

class AutoGeneratedPage {
    
    // Ejemplo: Usar locators de navegación
    clickNavigationItem(itemKey) {
        const navItem = locators.navigation[itemKey];
        if (navItem) {
            cy.get(navItem.primary).click();
        } else {
            throw new Error(`Elemento de navegación '${itemKey}' no encontrado`);
        }
    }
    
    // Ejemplo: Usar locators de botones con fallback
    clickButton(buttonKey) {
        const button = locators.buttons[buttonKey];
        if (button) {
            // Intentar selector principal
            cy.get('body').then($body => {
                if ($body.find(button.primary).length > 0) {
                    cy.get(button.primary).click();
                } else if (button.alternatives && button.alternatives.length > 0) {
                    // Usar selector alternativo
                    cy.get(button.alternatives[0]).click();
                } else {
                    throw new Error(`Botón '${buttonKey}' no encontrado`);
                }
            });
        }
    }
    
    // Ejemplo: Llenar inputs automáticamente
    fillInput(inputKey, value) {
        const input = locators.inputs[inputKey];
        if (input) {
            cy.get(input.primary).clear().type(value);
        } else {
            throw new Error(`Input '${inputKey}' no encontrado`);
        }
    }
    
    // Ejemplo: Verificar elementos
    verifyElementExists(category, elementKey) {
        const element = locators[category] && locators[category][elementKey];
        if (element) {
            cy.get(element.primary).should('exist').and('be.visible');
        } else {
            throw new Error(`Elemento '${elementKey}' en categoría '${category}' no encontrado`);
        }
    }
    
    // Ejemplo: Obtener información de elemento
    getElementInfo(category, elementKey) {
        const element = locators[category] && locators[category][elementKey];
        if (element) {
            return {
                selector: element.primary,
                alternatives: element.alternatives,
                description: element.description,
                isInteractive: element.isInteractive
            };
        }
        return null;
    }
}

// ============================================================================
// EJEMPLOS DE USO EN STEPS
// ============================================================================

// Ejemplo en step definition
/*
When('Hago click en el elemento {string} de {string}', (elementKey, category) => {
    const page = new AutoGeneratedPage();
    
    switch(category) {
        case 'navegacion':
            page.clickNavigationItem(elementKey);
            break;
        case 'botones':
            page.clickButton(elementKey);
            break;
        default:
            page.verifyElementExists(category, elementKey);
    }
});
*/

// ============================================================================
// UTILIDADES PARA DEBUGGING
// ============================================================================

class LocatorUtils {
    
    // Listar todos los locators disponibles
    static listAllLocators() {
        console.log('📋 Locators disponibles:');
        Object.entries(locators).forEach(([category, items]) => {
            if (category !== 'metadata' && typeof items === 'object') {
                console.log(`\n${category.toUpperCase()}:`);
                Object.keys(items).forEach(key => {
                    console.log(`  - ${key}`);
                });
            }
        });
    }
    
    // Buscar locator por texto
    static findLocatorByText(searchText) {
        const results = [];
        Object.entries(locators).forEach(([category, items]) => {
            if (category !== 'metadata' && typeof items === 'object') {
                Object.entries(items).forEach(([key, locator]) => {
                    if (locator.text && locator.text.toLowerCase().includes(searchText.toLowerCase())) {
                        results.push({
                            category,
                            key,
                            locator
                        });
                    }
                });
            }
        });
        return results;
    }
    
    // Validar que un locator existe en la página
    static validateLocator(category, key) {
        const element = locators[category] && locators[category][key];
        if (!element) {
            return { valid: false, error: 'Locator no encontrado' };
        }
        
        return cy.get('body').then($body => {
            const primaryExists = $body.find(element.primary).length > 0;
            const alternativeExists = element.alternatives && 
                element.alternatives.some(alt => $body.find(alt).length > 0);
            
            return {
                valid: primaryExists || alternativeExists,
                primaryExists,
                alternativeExists,
                element
            };
        });
    }
}

module.exports = { AutoGeneratedPage, LocatorUtils };

// ============================================================================
// ESTADÍSTICAS DE GENERACIÓN
// ============================================================================
/*
Metadata de generación:
{
  "generatedAt": "2025-05-29T02:20:41.079Z",
  "sourceFile": "discovered-elements-2025-05-29T02-18-28-289Z.json",
  "url": "https://practice.automationtesting.in/__cypress/iframes/cypress%5Ce2e%5Cfeatures%5Cexploratory.feature?browserFamily=chromium",
  "totalElementsProcessed": 104,
  "description": "Locators generados automáticamente por scraper unificado",
  "processingStats": {
    "navigation": 30,
    "buttons": 1,
    "inputs": 1,
    "links": 13,
    "containers": 4,
    "images": 2,
    "interactive": 0
  }
}
*/
