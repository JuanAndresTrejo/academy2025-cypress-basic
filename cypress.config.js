const { defineConfig } = require("cypress");
const createBundler = require("@bahmutov/cypress-esbuild-preprocessor");
const preprocessor = require("@badeball/cypress-cucumber-preprocessor");
const createEsbuildPlugin = require("@badeball/cypress-cucumber-preprocessor/esbuild");
const allureWriter = require("@shelex/cypress-allure-plugin/writer");
const fs = require('fs');
const path = require('path');
const glob = require('glob');

async function setupNodeEvents(on, config) {
  // This is required for the preprocessor to be able to generate JSON reports after each run, and more,
  await preprocessor.addCucumberPreprocessorPlugin(on, config);

  on("before:browser:launch", (browser = {}, launchOptions) => {
        if (browser.name === "chrome") {
          launchOptions.args.push("--disable-gpu");
        }
        return launchOptions;
      });

  on(
    "file:preprocessor",
    createBundler({
      plugins: [createEsbuildPlugin.default(config)],
    })
  );
  allureWriter(on, config);

  // üïµÔ∏è‚Äç‚ôÇÔ∏è Tareas personalizadas para funcionalidad exploratoria
  on('task', {
    // Tarea para asegurar que existe un directorio
    ensureDir(dirPath) {
      const fullPath = path.resolve(dirPath);
      if (!fs.existsSync(fullPath)) {
        fs.mkdirSync(fullPath, { recursive: true });
        console.log(`üìÅ Directorio creado: ${fullPath}`);
      }
      return fullPath;
    },

    // Tarea para encontrar el archivo m√°s reciente que coincida con un patr√≥n
    findLatestFile(pattern) {
      try {
        const files = glob.sync(pattern);
        if (files.length === 0) {
          return null;
        }
        
        // Ordenar por fecha de modificaci√≥n (m√°s reciente primero)
        const sortedFiles = files
          .map(file => ({
            path: file,
            mtime: fs.statSync(file).mtime
          }))
          .sort((a, b) => b.mtime - a.mtime);
        
        console.log(`üîç Archivo m√°s reciente encontrado: ${sortedFiles[0].path}`);
        return sortedFiles[0].path;
      } catch (error) {
        console.error(`‚ùå Error buscando archivos: ${error.message}`);
        return null;
      }
    },

    // Tarea para limpiar archivos antiguos de exploraci√≥n
    cleanupDiscoveredFiles(maxAge = 7) {
      try {
        const discoveredDir = 'cypress/fixtures/discovered';
        if (!fs.existsSync(discoveredDir)) {
          return { cleaned: 0, message: 'Directorio no existe' };
        }

        const files = fs.readdirSync(discoveredDir);
        const now = new Date();
        const maxAgeMs = maxAge * 24 * 60 * 60 * 1000; // d√≠as a milisegundos
        let cleanedCount = 0;

        files.forEach(file => {
          const filePath = path.join(discoveredDir, file);
          const stats = fs.statSync(filePath);
          const age = now - stats.mtime;

          if (age > maxAgeMs) {
            fs.unlinkSync(filePath);
            cleanedCount++;
            console.log(`üóëÔ∏è Archivo eliminado: ${file}`);
          }
        });

        return { 
          cleaned: cleanedCount, 
          message: `Limpieza completada: ${cleanedCount} archivos eliminados` 
        };
      } catch (error) {
        console.error(`‚ùå Error en limpieza: ${error.message}`);
        return { cleaned: 0, message: `Error: ${error.message}` };
      }
    },

    // Tarea para generar reporte de elementos descubiertos
    generateElementsReport() {
      try {
        const discoveredDir = 'cypress/fixtures/discovered';
        const reportPath = path.join(discoveredDir, 'elements-report.html');
        
        // Buscar archivos de elementos
        const elementFiles = glob.sync(path.join(discoveredDir, 'discovered-elements-*.json'));
        const navigationFiles = glob.sync(path.join(discoveredDir, 'navigation-map.json'));
        const locatorFiles = glob.sync('cypress/pages/locators/AutoGeneratedLocators.json');

        let reportContent = `
<!DOCTYPE html>
<html>
<head>
    <title>üïµÔ∏è‚Äç‚ôÇÔ∏è Reporte de Elementos Descubiertos</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .category { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
        .element { margin: 10px 0; padding: 10px; background: #f9f9f9; border-radius: 3px; }
        .selector { font-family: monospace; background: #e8e8e8; padding: 2px 5px; border-radius: 3px; }
        .stats { background: #e7f3ff; padding: 15px; border-radius: 5px; margin: 20px 0; }
    </style>
</head>
<body>
    <h1>üïµÔ∏è‚Äç‚ôÇÔ∏è Reporte de Elementos Descubiertos</h1>
    <div class="stats">
        <h3>üìä Estad√≠sticas</h3>
        <p><strong>Archivos de elementos:</strong> ${elementFiles.length}</p>
        <p><strong>Archivos de navegaci√≥n:</strong> ${navigationFiles.length}</p>
        <p><strong>Archivos de locators:</strong> ${locatorFiles.length}</p>
        <p><strong>Generado:</strong> ${new Date().toISOString()}</p>
    </div>
`;

        // Procesar archivos de elementos
        elementFiles.forEach(file => {
          const data = JSON.parse(fs.readFileSync(file, 'utf8'));
          reportContent += `
    <div class="category">
        <h3>üìÑ ${path.basename(file)}</h3>
        <p><strong>URL:</strong> ${data.metadata?.url || 'N/A'}</p>
        <p><strong>Total elementos:</strong> ${data.metadata?.totalElements || 0}</p>
        <p><strong>Timestamp:</strong> ${data.metadata?.timestamp || 'N/A'}</p>
    </div>
`;
        });

        reportContent += `
</body>
</html>`;

        fs.writeFileSync(reportPath, reportContent);
        console.log(`üìä Reporte generado: ${reportPath}`);
        return { success: true, path: reportPath };
      } catch (error) {
        console.error(`‚ùå Error generando reporte: ${error.message}`);
        return { success: false, error: error.message };
      }
    }
  });

  // Make sure to return the config object as it might have been modified by the plugin.
  return config;
}

module.exports = defineConfig({
  env: {
    TEST_URL: "http://practice.automationtesting.in",
    DEBUG: true,
  },
  e2e: {
    setupNodeEvents,
    //specPattern: "cypress/e2e/features/*.feature",
    //specPattern: "cypress/integration/*.*.js",
    experimentalOriginDependencies: true,
    hideXHRInCommandLog: false,
    specPattern: ["cypress/e2e/features/**/*.feature"],
    baseUrl: "http://practice.automationtesting.in",
    projectId: "avumub",
    viewportWidth: 1920,
    viewportHeight: 1280,
    chromeWebSecurity: false,
    experimentalStudio: true,
    video: true,
    env: {
      allureReuseAfterSpec: true,
    },
  },
});
